#!/usr/bin/env bash

set -e

# shellcheck source=/dev/null
. /var/vcap/jobs/rabbitmq-server/env
[ -z "$DEBUG" ] || set -x

exec 1> >(tee -a "${RABBITMQ_LOG_BASE:?must be set}/stop.log") 2>&1

main() {
  # shellcheck source=jobs/rabbitmq-server/templates/bin/_end
  . _begin "Stopping rabbitmq-server BOSH job"
  if rabbitmq_node_accessible
  then
    suggest_bosh_stop
    new_shutdown || legacy_stop
  fi
  cleanup_pid
  # shellcheck source=jobs/rabbitmq-server/templates/bin/_stop_epmd
  . _stop_epmd
  # shellcheck source=jobs/rabbitmq-server/templates/bin/_end
  . _end "rabbitmq-server BOSH job stopped"
}

rabbitmq_node_accessible() {
  rabbitmqctl eval "ok."
}

suggest_bosh_stop() {
    echo "Stopping RabbitMQ via Monit is not recommended
RabbitMQ should be stopped via bosh stop, specifically via the drain script

The monit stop command will fail if it does not complete within 30s
Since RabbitMQ might take more than 30s to stop, we recommend stopping it via the drain script, which can take as long as it needs"
}

new_shutdown() {
  echo "Performing clean RabbitMQ shutdown ..."
  rabbitmqctl shutdown
}

legacy_stop() {
  echo "Performing legacy RabbitMQ stop ..."
  rabbitmqctl stop "${RABBITMQ_PID_FILE:?must be set}"
}

cleanup_pid() {
  echo "Removing $RABBITMQ_PID_FILE ..."
  rm -f "$RABBITMQ_PID_FILE"
}

main
